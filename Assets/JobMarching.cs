using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Jobs;
using Unity.Jobs;
using System;
using Unity.Collections;
using Unity.Mathematics;

namespace MarchingCubes
{
    /// <summary>
    /// Class containg static methods for generating marching cubes surfaces.
    /// </summary>
    public class JobMarching
    {
        /// <summary>
        /// This stores all the check functions for marching jobs while the job is happening.
        /// </summary>
        private static List<Func<float3, float>> checkFunctions;

        /// <summary>
        /// Base version of marching cubes with no added features or accurate intersections.
        /// </summary>
        /// <param name="pos"></param>
        /// <param name="field"></param>
        /// <param name="dimension"></param>
        /// <param name="cubeSize"></param>
        /// <returns></returns>
        public static Tuple<Vector3[], int[]> GetMesh(Vector3 pos, int[] field, int dimension, float cubeSize)
        {
            MarchingCubes marchingJob = new MarchingCubes(pos, field, dimension, cubeSize);
            JobHandle job = marchingJob.Schedule(marchingJob.field.Length, 16);
            job.Complete();

            List<Vector3> verts = new List<Vector3>();
            List<int> tris = new List<int>();

            int v = 0;
            for(int i = 0; i < marchingJob.numOfVerts.Length; i++)
            {
                for(int j = i * 16;  j < (i * 16) + marchingJob.numOfVerts[i]; j++)
                {
                    verts.Add(marchingJob.cellInfo[j]);
                }
                for(int j = i * 16; j < (i * 16) + marchingJob.numOfTris[i]; j++)
                {
                    tris.Add(marchingJob.triInfo[j] + v);
                }
                v += marchingJob.numOfVerts[i];
            }

            marchingJob.cellInfo.Dispose();
            marchingJob.triInfo.Dispose();
            marchingJob.field.Dispose();
            marchingJob.numOfVerts.Dispose();
            marchingJob.numOfTris.Dispose();

            return new Tuple<Vector3[], int[]>(verts.ToArray(), tris.ToArray());
        }


        public static IEnumerator GetMesh(Vector3 pos, int dimension, float cubeSize, 
                                            Func<float3, float> checkFunc, float epsilon, int maxIter, Action<Tuple<Vector3[], int[]>> action)
        {
            if (checkFunctions == null) checkFunctions = new List<Func<float3, float>>();
            checkFunctions.Add(checkFunc);
            MarchingCubes marchingJob = new MarchingCubes(pos, new int[1], dimension, cubeSize, epsilon, maxIter, checkFunctions.Count - 1);
            JobHandle job = marchingJob.Schedule(dimension * dimension * dimension, 64);

            JobHandle.ScheduleBatchedJobs();
            yield return new WaitForEndOfFrame();
            job.Complete();

            List<Vector3> verts = new List<Vector3>();
            List<int> tris = new List<int>();

            int v = 0;
            for (int i = 0; i < marchingJob.numOfVerts.Length; i++)
            {
                for (int j = i * 16; j < (i * 16) + marchingJob.numOfVerts[i]; j++)
                {
                    verts.Add(marchingJob.cellInfo[j]);
                }
                for (int j = i * 16; j < (i * 16) + marchingJob.numOfTris[i]; j++)
                {
                    tris.Add(marchingJob.triInfo[j] + v);
                }
                v += marchingJob.numOfVerts[i];
            }

            marchingJob.cellInfo.Dispose();
            marchingJob.triInfo.Dispose();
            marchingJob.field.Dispose();
            marchingJob.numOfVerts.Dispose();
            marchingJob.numOfTris.Dispose();

            action.Invoke(new Tuple<Vector3[], int[]>(verts.ToArray(), tris.ToArray()));
            yield break;
        }
        /// <summary>
        /// Contians the info necessary for executing marching cubes.
        /// </summary>
        struct MarchingCubes : IJobParallelFor
        {
            [NativeDisableParallelForRestriction]
            public NativeArray<float3> cellInfo;
            [NativeDisableParallelForRestriction]
            public NativeArray<int> triInfo;
            public NativeArray<int> numOfVerts;
            public NativeArray<int> numOfTris;

            public readonly NativeArray<int> field;
            public readonly int dimension;
            public readonly float cubeSize;
            public readonly float3 position;
            
            public float epsilon;
            public int maxIter;
            public int funcNum;

            /// <summary>
            /// Constructor for base form.
            /// </summary>
            /// <param name="pos"></param>
            /// <param name="_field"></param>
            /// <param name="_dimension"></param>
            /// <param name="_cubeSize"></param>
            public MarchingCubes(Vector3 pos, int[] _field, int _dimension, float _cubeSize)
            {
                field = new NativeArray<int>(_field, Allocator.TempJob);
                dimension = _dimension;
                cubeSize = _cubeSize;
                cellInfo = new NativeArray<float3>(dimension * dimension * dimension * 16, Allocator.TempJob);
                triInfo = new NativeArray<int>(dimension * dimension * dimension * 16, Allocator.TempJob);
                numOfVerts = new NativeArray<int>(dimension * dimension * dimension, Allocator.TempJob);
                numOfTris = new NativeArray<int>(dimension * dimension * dimension, Allocator.TempJob);
                position = new float3(pos);
                
                epsilon = 0;
                maxIter = 0;
                funcNum = -1;
            }

            /// <summary>
            /// Constructer for function form.
            /// </summary>
            /// <param name="pos"></param>
            /// <param name="_field"></param>
            /// <param name="_dimension"></param>
            /// <param name="_cubeSize"></param>
            /// <param name="_epsilon"></param>
            /// <param name="_maxIter"></param>
            /// <param name="_funcNumber"></param>
            public MarchingCubes(Vector3 pos, int[] _field, int _dimension, float _cubeSize, float _epsilon, int _maxIter, int _funcNumber)
            {
                field = new NativeArray<int>(_field, Allocator.TempJob);
                dimension = _dimension;
                cubeSize = _cubeSize;
                cellInfo = new NativeArray<float3>(dimension * dimension * dimension * 16, Allocator.TempJob);
                triInfo = new NativeArray<int>(dimension * dimension * dimension * 16, Allocator.TempJob);
                numOfVerts = new NativeArray<int>(dimension * dimension * dimension, Allocator.TempJob);
                numOfTris = new NativeArray<int>(dimension * dimension * dimension, Allocator.TempJob);
                position = new float3(pos);
                
                epsilon = _epsilon;
                maxIter = _maxIter;
                funcNum = _funcNumber;
            }

            public void Execute(int index)
            {
                
                // Break at the edge
                var coord = IndexToCoord(index, dimension);
                if (coord.z == dimension - 1 || coord.y == dimension - 1 || coord.x == dimension - 1)
                    return;
                
                int cellVal = 0;

                // Check for field type
                for (int z = 1; z >= 0; z--)
                {
                    for (int y = 1; y >= 0; y--)
                    {
                        for (int x = 1; x >= 0; x--)
                        {
                            if (funcNum == -1)
                            {
                                cellVal |= (field[CoordToIndex(coord.x + x, coord.y + y, coord.z + z, dimension)] > 0) ? 0x1 : 0;
                            }
                            else
                            {
                                var newCoord = new float3(cubeSize * (coord.x + x), cubeSize * (coord.y + y), cubeSize * (coord.z + z));
                                cellVal |= (checkFunctions[funcNum].Invoke(newCoord) > 0) ? 0x1 : 0;
                            }
                            if (x == 0 && y == 0 && z == 0) continue;
                            cellVal = (cellVal << 1);
                        }
                    }
                }
                if (cellVal == 0 || cellVal == 255) return;
                
                var triLUTAddr = MarchingCubesLookup.regularCellClass[cellVal];
                var tris = MarchingCubesLookup.regularCellData[triLUTAddr].Item2;
                var vertexList = MarchingCubesLookup.regularVertexData[cellVal];

                numOfTris[index] = tris.Length;

                for(int i = 0; i < tris.Length; i++)
                {
                    triInfo[index * 16 + i] = tris[i];
                }

                numOfVerts[index] = vertexList.Length;

                for(int i = 0; i < vertexList.Length; i++)
                {
                    var edge1 = vertexList[i] & 0x7;
                    var edge2 = (vertexList[i] >> 4) & 0x7;

                    float3 edge1vec = new float3(coord.x + ((edge1 >> 0) & 1), coord.y + ((edge1 >> 1) & 1), coord.z + ((edge1 >> 2) & 1)) * cubeSize;
                    float3 edge2vec = new float3(coord.x + ((edge2 >> 0) & 1), coord.y + ((edge2 >> 1) & 1), coord.z + ((edge2 >> 2) & 1)) * cubeSize;

                    float3 midVec = (edge2vec + edge1vec)/ 2;
                    
                    if (funcNum != -1)
                    {
                        int iter = 0;
                        float delta = float.MaxValue;
                        
                        var e1C = checkFunctions[funcNum].Invoke(edge1vec);
                        var e2C = checkFunctions[funcNum].Invoke(edge2vec);
                        
                        if(e1C != e2C)
                        {
                            midVec = (-e1C) / (e2C - e1C) * (edge2vec - edge1vec) + edge1vec;
                        }

                        /*
                        while(delta > epsilon)
                        {
                            if (iter > maxIter) break;
                            iter++;

                            // Make checks
                            var e1C = checkFunctions[funcNum].Invoke(edge1vec);
                            var e2C = checkFunctions[funcNum].Invoke(edge2vec);
                            var mVC = checkFunctions[funcNum].Invoke(midVec);
                            if (e1C > 0 && e2C > 0 && mVC > 0) break;
                            else if(e1C > 0 && mVC > 0)
                            {
                                edge1vec = midVec;
                                var hold = (edge2vec + edge1vec) / 2;
                                delta = Mathf.Abs((midVec.x - hold.x) + (midVec.y - hold.y) + (midVec.z - hold.z));
                                midVec = hold;
                            }
                            else if (e2C > 0 && mVC > 0)
                            {
                                edge2vec = midVec;
                                var hold = (edge2vec + edge1vec) / 2;
                                delta = Mathf.Abs((midVec.x - hold.x) + (midVec.y - hold.y) + (midVec.z - hold.z));
                                midVec = hold;
                            }
                        }
                        */
                    }
                    
                    cellInfo[index * 16 + i] = new float3(
                        (midVec.x),
                        (midVec.y),
                        (midVec.z));
                }
            }

            private int3 IndexToCoord(int index, int dimension) 
            {
                return new int3
                    (
                        index % dimension,
                        (index / dimension) % dimension,
                        index / (dimension * dimension)
                    );
            }

            private int CoordToIndex(int x, int y, int z, int dimension)
            {
                return x + y * dimension + z * dimension * dimension;
            }
        }
    }

    /// <summary>
    /// This class contains vertex information for each case of marching cubes.
    /// Found on transvoxel.org
    /// </summary>
    static internal class MarchingCubesLookup
    {
        public static readonly byte[] regularCellClass =
        {
            0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
            0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
            0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
            0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
            0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
            0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
            0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
            0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
            0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
            0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
            0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
            0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
            0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
            0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
            0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
            0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00
        };

        public static readonly Tuple<byte,int[]>[] regularCellData =
        {
            new Tuple<byte, int[]>(0x00, new int[]{}),
            new Tuple<byte, int[]>(0x31, new int[]{0, 1, 2}),
            new Tuple<byte, int[]>(0x62, new int[]{0, 1, 2, 3, 4, 5}),
            new Tuple<byte, int[]>(0x42, new int[]{0, 1, 2, 0, 2, 3}),
            new Tuple<byte, int[]>(0x53, new int[]{0, 1, 4, 1, 3, 4, 1, 2, 3}),
            new Tuple<byte, int[]>(0x73, new int[]{0, 1, 2, 0, 2, 3, 4, 5, 6}),
            new Tuple<byte, int[]>(0x93, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8}),
            new Tuple<byte, int[]>(0x84, new int[]{0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7}),
            new Tuple<byte, int[]>(0x84, new int[]{0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7}),
            new Tuple<byte, int[]>(0xC4, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),
            new Tuple<byte, int[]>(0x64, new int[]{0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3}),
            new Tuple<byte, int[]>(0x64, new int[]{0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2}),
            new Tuple<byte, int[]>(0x64, new int[]{0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3}),
            new Tuple<byte, int[]>(0x64, new int[]{0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5}),
            new Tuple<byte, int[]>(0x75, new int[]{0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6}),
            new Tuple<byte, int[]>(0x95, new int[]{0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8})
        };

        public static readonly ushort[][] regularVertexData = new ushort[256][]
        {
	        new ushort[]{},
            new ushort[]{0x6201, 0x5102, 0x3304},
            new ushort[]{0x6201, 0x2315, 0x4113},
            new ushort[]{0x5102, 0x3304, 0x2315, 0x4113},
            new ushort[]{0x5102, 0x4223, 0x1326},
            new ushort[]{0x3304, 0x6201, 0x4223, 0x1326},
            new ushort[]{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
            new ushort[]{0x4223, 0x1326, 0x3304, 0x2315, 0x4113},
            new ushort[]{0x4113, 0x8337, 0x4223},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x6201, 0x2315, 0x8337, 0x4223},
            new ushort[]{0x5102, 0x3304, 0x2315, 0x8337, 0x4223},
            new ushort[]{0x5102, 0x4113, 0x8337, 0x1326},
            new ushort[]{0x4113, 0x8337, 0x1326, 0x3304, 0x6201},
            new ushort[]{0x6201, 0x2315, 0x8337, 0x1326, 0x5102},
            new ushort[]{0x3304, 0x2315, 0x8337, 0x1326},
            new ushort[]{0x3304, 0x1146, 0x2245},
            new ushort[]{0x6201, 0x5102, 0x1146, 0x2245},
            new ushort[]{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x2315, 0x4113, 0x5102, 0x1146, 0x2245},
            new ushort[]{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x1146, 0x2245, 0x6201, 0x4223, 0x1326},
            new ushort[]{0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
            new ushort[]{0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113},
            new ushort[]{0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102},
            new ushort[]{0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201},
            new ushort[]{0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245},
            new ushort[]{0x2245, 0x2315, 0x8337, 0x1326, 0x1146},
            new ushort[]{0x2315, 0x2245, 0x8157},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x4113, 0x6201, 0x2245, 0x8157},
            new ushort[]{0x2245, 0x8157, 0x4113, 0x5102, 0x3304},
            new ushort[]{0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326},
            new ushort[]{0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113},
            new ushort[]{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x8337, 0x4223, 0x6201, 0x2245, 0x8157},
            new ushort[]{0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223},
            new ushort[]{0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201},
            new ushort[]{0x8157, 0x8337, 0x1326, 0x3304, 0x2245},
            new ushort[]{0x2315, 0x3304, 0x1146, 0x8157},
            new ushort[]{0x6201, 0x5102, 0x1146, 0x8157, 0x2315},
            new ushort[]{0x3304, 0x1146, 0x8157, 0x4113, 0x6201},
            new ushort[]{0x4113, 0x5102, 0x1146, 0x8157},
            new ushort[]{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326},
            new ushort[]{0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146},
            new ushort[]{0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326},
            new ushort[]{0x1326, 0x1146, 0x8157, 0x4113, 0x4223},
            new ushort[]{0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201},
            new ushort[]{0x4223, 0x5102, 0x1146, 0x8157, 0x8337},
            new ushort[]{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326},
            new ushort[]{0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315},
            new ushort[]{0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102},
            new ushort[]{0x1326, 0x1146, 0x8157, 0x8337},
            new ushort[]{0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x5102, 0x4223, 0x8267, 0x1146},
            new ushort[]{0x3304, 0x6201, 0x4223, 0x8267, 0x1146},
            new ushort[]{0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113},
            new ushort[]{0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304},
            new ushort[]{0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x8267, 0x1146, 0x5102, 0x4113, 0x8337},
            new ushort[]{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304},
            new ushort[]{0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102},
            new ushort[]{0x1146, 0x3304, 0x2315, 0x8337, 0x8267},
            new ushort[]{0x3304, 0x1326, 0x8267, 0x2245},
            new ushort[]{0x1326, 0x8267, 0x2245, 0x6201, 0x5102},
            new ushort[]{0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113},
            new ushort[]{0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102},
            new ushort[]{0x5102, 0x4223, 0x8267, 0x2245, 0x3304},
            new ushort[]{0x6201, 0x4223, 0x8267, 0x2245},
            new ushort[]{0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113},
            new ushort[]{0x4113, 0x4223, 0x8267, 0x2245, 0x2315},
            new ushort[]{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337},
            new ushort[]{0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223},
            new ushort[]{0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102},
            new ushort[]{0x8337, 0x8267, 0x2245, 0x6201, 0x4113},
            new ushort[]{0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304},
            new ushort[]{0x2315, 0x8337, 0x8267, 0x2245},
            new ushort[]{0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113},
            new ushort[]{0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146},
            new ushort[]{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146},
            new ushort[]{0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157},
            new ushort[]{0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157},
            new ushort[]{0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146},
            new ushort[]{0x8157, 0x2315, 0x3304, 0x1326, 0x8267},
            new ushort[]{0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326},
            new ushort[]{0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157},
            new ushort[]{0x8267, 0x8157, 0x4113, 0x5102, 0x1326},
            new ushort[]{0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304},
            new ushort[]{0x2315, 0x6201, 0x4223, 0x8267, 0x8157},
            new ushort[]{0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201},
            new ushort[]{0x4113, 0x4223, 0x8267, 0x8157},
            new ushort[]{0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
            new ushort[]{0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267},
            new ushort[]{0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223},
            new ushort[]{0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337},
            new ushort[]{0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315},
            new ushort[]{0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157},
	        new ushort[]{0x8337, 0x8267, 0x8157},
	        new ushort[]{0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x4113, 0x8157, 0x8267, 0x4223},
	        new ushort[]{0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x8157, 0x8267, 0x4223, 0x6201, 0x2315},
	        new ushort[]{0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102},
	        new ushort[]{0x1326, 0x5102, 0x4113, 0x8157, 0x8267},
	        new ushort[]{0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267},
	        new ushort[]{0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267},
	        new ushort[]{0x8267, 0x1326, 0x3304, 0x2315, 0x8157},
	        new ushort[]{0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267},
	        new ushort[]{0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	        new ushort[]{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267},
	        new ushort[]{0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245},
	        new ushort[]{0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245},
	        new ushort[]{0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
	        new ushort[]{0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267},
	        new ushort[]{0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245},
	        new ushort[]{0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267},
	        new ushort[]{0x2315, 0x2245, 0x8267, 0x8337},
	        new ushort[]{0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x4113, 0x6201, 0x2245, 0x8267, 0x8337},
	        new ushort[]{0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304},
	        new ushort[]{0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	        new ushort[]{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267},
	        new ushort[]{0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
	        new ushort[]{0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337},
	        new ushort[]{0x2315, 0x2245, 0x8267, 0x4223, 0x4113},
	        new ushort[]{0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x6201, 0x2245, 0x8267, 0x4223},
	        new ushort[]{0x3304, 0x2245, 0x8267, 0x4223, 0x5102},
	        new ushort[]{0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326},
	        new ushort[]{0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201},
	        new ushort[]{0x5102, 0x6201, 0x2245, 0x8267, 0x1326},
	        new ushort[]{0x3304, 0x2245, 0x8267, 0x1326},
	        new ushort[]{0x8267, 0x8337, 0x2315, 0x3304, 0x1146},
	        new ushort[]{0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201},
	        new ushort[]{0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201},
	        new ushort[]{0x8337, 0x4113, 0x5102, 0x1146, 0x8267},
	        new ushort[]{0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	        new ushort[]{0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326},
	        new ushort[]{0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
	        new ushort[]{0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337},
	        new ushort[]{0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146},
	        new ushort[]{0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113},
	        new ushort[]{0x1146, 0x8267, 0x4223, 0x6201, 0x3304},
	        new ushort[]{0x5102, 0x1146, 0x8267, 0x4223},
	        new ushort[]{0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146},
	        new ushort[]{0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267},
	        new ushort[]{0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102},
	        new ushort[]{0x1326, 0x1146, 0x8267},
	        new ushort[]{0x1326, 0x8337, 0x8157, 0x1146},
	        new ushort[]{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113},
	        new ushort[]{0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146},
	        new ushort[]{0x8337, 0x8157, 0x1146, 0x5102, 0x4223},
	        new ushort[]{0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304},
	        new ushort[]{0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113},
	        new ushort[]{0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113},
	        new ushort[]{0x4223, 0x4113, 0x8157, 0x1146, 0x1326},
	        new ushort[]{0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326},
	        new ushort[]{0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326},
	        new ushort[]{0x4113, 0x8157, 0x1146, 0x5102},
	        new ushort[]{0x6201, 0x4113, 0x8157, 0x1146, 0x3304},
	        new ushort[]{0x2315, 0x8157, 0x1146, 0x5102, 0x6201},
	        new ushort[]{0x2315, 0x8157, 0x1146, 0x3304},
	        new ushort[]{0x2245, 0x3304, 0x1326, 0x8337, 0x8157},
	        new ushort[]{0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102},
	        new ushort[]{0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113},
	        new ushort[]{0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157},
	        new ushort[]{0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102},
	        new ushort[]{0x8157, 0x2245, 0x6201, 0x4223, 0x8337},
	        new ushort[]{0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315},
	        new ushort[]{0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113},
	        new ushort[]{0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223},
	        new ushort[]{0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102},
	        new ushort[]{0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315},
	        new ushort[]{0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245},
	        new ushort[]{0x3304, 0x5102, 0x4113, 0x8157, 0x2245},
	        new ushort[]{0x4113, 0x8157, 0x2245, 0x6201},
	        new ushort[]{0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304},
	        new ushort[]{0x2315, 0x8157, 0x2245},
	        new ushort[]{0x1146, 0x1326, 0x8337, 0x2315, 0x2245},
	        new ushort[]{0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113},
	        new ushort[]{0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304},
	        new ushort[]{0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223},
	        new ushort[]{0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245},
	        new ushort[]{0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223},
	        new ushort[]{0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146},
	        new ushort[]{0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223},
	        new ushort[]{0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
	        new ushort[]{0x1326, 0x4223, 0x6201, 0x2245, 0x1146},
	        new ushort[]{0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326},
	        new ushort[]{0x2245, 0x1146, 0x5102, 0x4113, 0x2315},
	        new ushort[]{0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201},
	        new ushort[]{0x6201, 0x2245, 0x1146, 0x5102},
	        new ushort[]{0x3304, 0x2245, 0x1146},
	        new ushort[]{0x3304, 0x1326, 0x8337, 0x2315},
	        new ushort[]{0x5102, 0x1326, 0x8337, 0x2315, 0x6201},
	        new ushort[]{0x6201, 0x3304, 0x1326, 0x8337, 0x4113},
	        new ushort[]{0x5102, 0x1326, 0x8337, 0x4113},
	        new ushort[]{0x4223, 0x8337, 0x2315, 0x3304, 0x5102},
	        new ushort[]{0x6201, 0x4223, 0x8337, 0x2315},
	        new ushort[]{0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201},
	        new ushort[]{0x4113, 0x4223, 0x8337},
	        new ushort[]{0x4113, 0x2315, 0x3304, 0x1326, 0x4223},
	        new ushort[]{0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102},
	        new ushort[]{0x3304, 0x1326, 0x4223, 0x6201},
	        new ushort[]{0x5102, 0x1326, 0x4223},
	        new ushort[]{0x5102, 0x4113, 0x2315, 0x3304},
	        new ushort[]{0x6201, 0x4113, 0x2315},
	        new ushort[]{0x6201, 0x3304, 0x5102},
	        new ushort[]{}
        };
    }
}